import os
import django
from collections import Counter
from django.db.models import Count, Avg, Sum, Max, Min

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aml_project.settings')
django.setup()

from transaction_monitoring.model.alert import SuspiciousTransactions
from transaction_monitoring.model.rule_settings import AMLRules

def analyze_alerts():
    """Analyze the alerts generated by the rules"""
    
    # Get all alerts
    alerts = SuspiciousTransactions.objects.all()
    total_alerts = alerts.count()
    
    if total_alerts == 0:
        print("No alerts found. Run generate_test_data.py and process_transactions.py first.")
        return
    
    print(f"\n===== ALERT ANALYSIS =====")
    print(f"Total alerts in system: {total_alerts}")
    
    # Analyze by rule
    rule_stats = alerts.values('flagged_reason').annotate(
        count=Count('id'),
        avg_score=Avg('risk_score'),
        max_score=Max('risk_score'),
        min_score=Min('risk_score'),
        total_amount=Sum('amount')
    ).order_by('-count')
    
    print("\n----- Alerts by Rule -----")
    for stat in rule_stats:
        rule_name = stat['flagged_reason']
        print(f"{rule_name}:")
        print(f"  Count: {stat['count']}")
        print(f"  Avg Score: {stat['avg_score']:.2f}")
        print(f"  Score Range: {stat['min_score']} - {stat['max_score']}")
        print(f"  Total Amount: ${stat['total_amount']:,.2f}")
        print()
    
    # Analyze by risk level
    risk_level_stats = alerts.values('risk_level').annotate(
        count=Count('id')
    ).order_by('-count')
    
    print("\n----- Alerts by Risk Level -----")
    for stat in risk_level_stats:
        print(f"{stat['risk_level']}: {stat['count']} alerts")
    
    # Analyze by customer
    customer_stats = alerts.values('customer_id', 'customer_name').annotate(
        count=Count('id')
    ).order_by('-count')[:5]
    
    print("\n----- Top Customers with Alerts -----")
    for i, stat in enumerate(customer_stats, 1):
        print(f"{i}. {stat['customer_name']} ({stat['customer_id']}): {stat['count']} alerts")
    
    # Transaction type analysis
    transaction_type_counts = Counter([alert.transaction_type for alert in alerts])
    
    print("\n----- Alerts by Transaction Type -----")
    for tx_type, count in transaction_type_counts.most_common():
        print(f"{tx_type}: {count} alerts")

def analyze_rule_effectiveness():
    """Analyze how effective each rule is at generating alerts"""
    
    print(f"\n===== RULE EFFECTIVENESS =====")
    
    # Get all rules
    rules = AMLRules.objects.all()
    
    # For each rule, get the alert stats
    for rule in rules:
        # Count alerts generated by this rule
        alerts = SuspiciousTransactions.objects.filter(flagged_reason__contains=rule.rule_name)
        alert_count = alerts.count()
        
        # Skip rules with no alerts
        if alert_count == 0:
            print(f"\n{rule.rule_name} (Code: {rule.rule_code}):")
            print("  No alerts generated by this rule")
            continue
        
        # Calculate statistics
        avg_score = alerts.aggregate(avg=Avg('risk_score'))['avg']
        total_amount = alerts.aggregate(sum=Sum('amount'))['sum']
        
        print(f"\n{rule.rule_name} (Code: {rule.rule_code}):")
        print(f"  Alert Count: {alert_count}")
        print(f"  Enabled: {'Yes' if rule.enabled else 'No'}")
        print(f"  Alert Level: {rule.alert_level}")
        print(f"  Min Alert Score: {rule.min_alert_score}")
        print(f"  Avg Generated Score: {avg_score:.2f}")
        print(f"  Total Amount: ${total_amount:,.2f}")

def main():
    print("Analyzing transaction monitoring results...")
    
    analyze_alerts()
    analyze_rule_effectiveness()
    
    print("\nAnalysis complete.")

if __name__ == "__main__":
    main() 